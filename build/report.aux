\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}Introductory Fourier analysis}{1}{}\protected@file@percent }
\citation{SimonXu2015}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.0.1}Fourier Series}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.0.2}Fourier Transform}{2}{}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Some signal in the time-domain (displayed on the left) with added noise. Computing the transform with a discrete version of the Fourier transform reveals the main frequencies that make up the original signal in the time-domain (displayed on the right)\relax }}{2}{}\protected@file@percent }
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:transform}{{1}{2}}
\citation{Randhawa2018}
\citation{HeidemanEtAl1984}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Discrete fourier transform}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.1.1}Matrix representation for the DFT computations}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Fast fourier transform}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Inverse Transforms}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}Computing the DFT and FFT}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.1}Example DFT using the formula}{3}{}\protected@file@percent }
\bibstyle{IEEEtran}
\bibdata{references}
\bibcite{SimonXu2015}{1}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.2}Computing DFT with a programming language}{4}{}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Implementing the DFT in Python is trivial and can almost be directly copied from the formula by utilizing Python's cmath library for complex exponentiation \relax }}{4}{}\protected@file@percent }
\newlabel{fig:pyDFT}{{2}{4}}
\bibcite{Randhawa2018}{2}
\bibcite{HeidemanEtAl1984}{3}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Implementing the DFT in C is still relatively easy thanks to Euler's formula. \relax }}{5}{}\protected@file@percent }
\newlabel{fig:cDFT}{{3}{5}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.3}Computing the inverse}{5}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.5}Signal processing applications}{5}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.5.1}Image processing}{5}{}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3}Fourier transform in Audio Processing}{5}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Use in Digital audio processing}{5}{}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {4}Comparing FFT implementations}{5}{}\protected@file@percent }
\gdef \@abspage@last{5}
